import subprocess
import os
import uuid
from fastapi import HTTPException
from app.core.services.s3 import s3, settings, upload_video
import cv2


def cut_video(video_id: str, start_time: float, end_time: float, format: str = None) -> dict:
    """
    –ù–∞—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NVIDIA NVENC (h264_nvenc).

    :param video_id: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ S3
    :param start_time: –ù–∞—á–∞–ª–æ –Ω–∞—Ä–µ–∑–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
    :param end_time: –ö–æ–Ω–µ—Ü –Ω–∞—Ä–µ–∑–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
    :param format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ None ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
    :return: JSON-–æ—Ç–≤–µ—Ç (URL –∏–ª–∏ –æ—à–∏–±–∫–∞)
    """

    try:
        # 1Ô∏è‚É£ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        if start_time < 0 or end_time <= start_time:
            raise HTTPException(status_code=400, detail="‚õî –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏: `start_time` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0, `end_time` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ `start_time`.")

        unique_id = uuid.uuid4().hex  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        input_file = f"/tmp/{video_id}"

        # 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if format is None:
            format = video_id.split(".")[-1]  # –ë–µ—Ä—ë–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

        output_file = f"/tmp/{unique_id}.{format}"  # –§–∞–π–ª —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º

        # 3Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú, –°–£–©–ï–°–¢–í–£–ï–¢ –õ–ò –í–ò–î–ï–û –í MinIO
        try:
            response = s3.head_object(Bucket=settings.S3_BUCKET_NAME, Key=video_id)
            file_size = response["ContentLength"]
            if file_size == 0:
                raise HTTPException(status_code=400, detail=f"‚ö†Ô∏è –í–∏–¥–µ–æ `{video_id}` –ø—É—Å—Ç–æ–µ.")
        except Exception:
            raise HTTPException(status_code=404, detail=f"‚ùå –í–∏–¥–µ–æ `{video_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ S3!")

        # 4Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ S3
        try:
            print(f"üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_id}")
            s3.download_file(settings.S3_BUCKET_NAME, video_id, input_file)
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {input_file}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

        # 5Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Ä–µ–∑–∫—É —á–µ—Ä–µ–∑ FFmpeg —Å H.264 NVENC (–∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ)
        command = [
            "ffmpeg", "-y", "-hwaccel", "cuda", "-hwaccel_output_format", "cuda",  # –í–∫–ª—é—á–∞–µ–º NVENC
            "-i", input_file,
            "-ss", str(start_time),
            "-to", str(end_time),
            "-c:v", "h264_nvenc", "-preset", "p4", "-b:v", "5M",  # –ö–æ–¥–µ–∫ NVENC
            "-c:a", "aac", "-b:a", "128k",  # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫ AAC
            output_file
        ]

        print(f"üî• FFmpeg –∫–æ–º–∞–Ω–¥–∞: {' '.join(command)}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg

        try:
            subprocess.run(command, check=True)
            print(f"‚úÖ –í–∏–¥–µ–æ –Ω–∞—Ä–µ–∑–∞–Ω–æ: {output_file}")
        except subprocess.CalledProcessError as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {str(e)}")

        # 6Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Ä–µ–∑–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ S3
        try:
            with open(output_file, "rb") as f:
                upload_video(f, f"{unique_id}.{format}")
            print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {unique_id}.{format}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {str(e)}")

        # 7Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(input_file)
        os.remove(output_file)

        # 8Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
        return {"message": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Ä–µ–∑–∞–Ω–æ!", "url": f"{settings.S3_ENDPOINT}/{settings.S3_BUCKET_NAME}/{unique_id}.{format}"}

    except HTTPException as e:
        # –ï—Å–ª–∏ –ø–æ–π–º–∞–ª–∏ `HTTPException`, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        raise e

    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–¥–∞—ë–º 500
        raise HTTPException(status_code=500, detail=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")



def convert_video(video_id: str, target_format: str) -> dict:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é FFmpeg –∏ NVENC.

    :param video_id: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ S3
    :param target_format: –§–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (mp4, avi, mov, mkv)
    :return: JSON-–æ—Ç–≤–µ—Ç (URL –∏–ª–∏ –æ—à–∏–±–∫–∞)
    """

    try:
        # 1Ô∏è‚É£ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        allowed_formats = ["mp4", "avi", "mov", "mkv"]
        if target_format.lower() not in allowed_formats:
            raise HTTPException(
                status_code=400,
                detail=f"‚õî –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç `{target_format}`. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed_formats)}"
            )

        unique_id = uuid.uuid4().hex  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        input_file = f"/tmp/{video_id}"
        output_file = f"/tmp/{unique_id}.{target_format}"  # –§–∞–π–ª —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º

        # 2Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú, –°–£–©–ï–°–¢–í–£–ï–¢ –õ–ò –í–ò–î–ï–û –í MinIO
        try:
            response = s3.head_object(Bucket=settings.S3_BUCKET_NAME, Key=video_id)
            file_size = response["ContentLength"]
            if file_size == 0:
                raise HTTPException(status_code=400, detail=f"‚ö†Ô∏è –í–∏–¥–µ–æ `{video_id}` –ø—É—Å—Ç–æ–µ.")
        except Exception:
            raise HTTPException(status_code=404, detail=f"‚ùå –í–∏–¥–µ–æ `{video_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ S3!")

        # 3Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ S3
        try:
            print(f"üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_id}")
            s3.download_file(settings.S3_BUCKET_NAME, video_id, input_file)
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {input_file}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

        # 4Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ FFmpeg —Å H.264 NVENC
        command = [
            "ffmpeg", "-y", "-hwaccel", "cuda", "-hwaccel_output_format", "cuda",  # –í–∫–ª—é—á–∞–µ–º NVENC
            "-i", input_file,
            "-c:v", "h264_nvenc", "-preset", "p4", "-b:v", "5M",  # –ö–æ–¥–µ–∫ NVENC
            "-c:a", "aac", "-b:a", "128k",  # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫ AAC
            output_file
        ]

        print(f"üî• FFmpeg –∫–æ–º–∞–Ω–¥–∞: {' '.join(command)}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg

        try:
            subprocess.run(command, check=True)
            print(f"‚úÖ –í–∏–¥–µ–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {output_file}")
        except subprocess.CalledProcessError as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {str(e)}")

        # 5Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ S3
        try:
            with open(output_file, "rb") as f:
                upload_video(f, f"{unique_id}.{target_format}")
            print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {unique_id}.{target_format}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {str(e)}")

        # 6Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(input_file)
        os.remove(output_file)

        # 7Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
        return {"message": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!", "url": f"{settings.S3_ENDPOINT}/{settings.S3_BUCKET_NAME}/{unique_id}.{target_format}"}

    except HTTPException as e:
        # –ï—Å–ª–∏ –ø–æ–π–º–∞–ª–∏ `HTTPException`, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        raise e

    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–¥–∞—ë–º 500
        raise HTTPException(status_code=500, detail=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


def resize_video(video_id: str, resolution: str, format: str = "mp4") -> dict:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg –∏ NVENC.

    :param video_id: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ S3
    :param resolution: –ù–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1280x720")
    :param format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MP4)
    :return: JSON-–æ—Ç–≤–µ—Ç (URL –∏–ª–∏ –æ—à–∏–±–∫–∞)
    """

    try:
        # 1Ô∏è‚É£ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        try:
            width, height = map(int, resolution.lower().split("x"))
            if width <= 0 or height <= 0:
                raise ValueError
        except ValueError:
            raise HTTPException(
                status_code=400,
                detail=f"‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{resolution}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '1280x720'."
            )

        unique_id = uuid.uuid4().hex  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        input_file = f"/tmp/{video_id}"
        output_file = f"/tmp/{unique_id}.{format}"  # –§–∞–π–ª —Å –Ω–æ–≤—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º

        # 2Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú, –°–£–©–ï–°–¢–í–£–ï–¢ –õ–ò –í–ò–î–ï–û –í MinIO
        try:
            response = s3.head_object(Bucket=settings.S3_BUCKET_NAME, Key=video_id)
            file_size = response["ContentLength"]
            if file_size == 0:
                raise HTTPException(status_code=400, detail=f"‚ö†Ô∏è –í–∏–¥–µ–æ `{video_id}` –ø—É—Å—Ç–æ–µ.")
        except Exception:
            raise HTTPException(status_code=404, detail=f"‚ùå –í–∏–¥–µ–æ `{video_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ S3!")

        # 3Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ S3
        try:
            print(f"üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_id}")
            s3.download_file(settings.S3_BUCKET_NAME, video_id, input_file)
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {input_file}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

        # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ `scale_cuda`
        scale_filter = f"scale_cuda={width}:{height}:force_original_aspect_ratio=decrease" if check_scale_cuda() else f"scale={width}:{height}:force_original_aspect_ratio=decrease"

        # 5Ô∏è‚É£ –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å NVENC (CUDA) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º DAR
        command = [
            "ffmpeg", "-y", "-hwaccel", "cuda", "-hwaccel_output_format", "cuda",  # –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            "-i", input_file,
            "-vf", scale_filter,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è scale
            "-c:v", "h264_nvenc", "-preset", "p4", "-b:v", "5M",  # –ö–æ–¥–µ–∫ NVENC
            "-c:a", "aac", "-b:a", "128k",  # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫ AAC
            output_file
        ]

        print(f"üî• FFmpeg –∫–æ–º–∞–Ω–¥–∞: {' '.join(command)}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg

        try:
            subprocess.run(command, check=True)
            print(f"‚úÖ –í–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {output_file}")
        except subprocess.CalledProcessError as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {str(e)}")

        # 6Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ S3
        try:
            with open(output_file, "rb") as f:
                upload_video(f, f"{unique_id}.{format}")
            print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {unique_id}.{format}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {str(e)}")

        # 7Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(input_file)
        os.remove(output_file)

        # 8Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
        return {"message": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", "url": f"{settings.S3_ENDPOINT}/{settings.S3_BUCKET_NAME}/{unique_id}.{format}"}

    except HTTPException as e:
        # –ï—Å–ª–∏ –ø–æ–π–º–∞–ª–∏ `HTTPException`, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        raise e

    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–¥–∞—ë–º 500
        raise HTTPException(status_code=500, detail=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    

def check_scale_cuda() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ `scale_cuda` –Ω–∞ —Ç–µ–∫—É—â–µ–º FFmpeg.
    """
    try:
        result = subprocess.run(["ffmpeg", "-hide_banner", "-filters"], capture_output=True, text=True)
        return "scale_cuda" in result.stdout
    except Exception:
        return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º `scale`


def get_video_resolution(file_path: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg.
    """
    try:
        result = subprocess.run(
            [
                "ffprobe",
                "-v", "error",
                "-select_streams", "v:0",
                "-show_entries", "stream=width,height",
                "-of", "csv=p=0",
                file_path
            ],
            capture_output=True,
            text=True,
            check=True
        )
        width, height = map(int, result.stdout.strip().split(","))
        return width, height
    except Exception as e:
        raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

def crop_video(video_id: str, x: int, y: int, width: int, height: int, format: str = "mp4") -> dict:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg –∏ NVENC.

    :param video_id: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ S3
    :param x: –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    :param y: –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    :param width: –®–∏—Ä–∏–Ω–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    :param height: –í—ã—Å–æ—Ç–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    :param format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MP4)
    :return: JSON-–æ—Ç–≤–µ—Ç (URL –∏–ª–∏ –æ—à–∏–±–∫–∞)
    """

    try:
        # 1Ô∏è‚É£ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        if x < 0 or y < 0 or width <= 0 or height <= 0:
            raise HTTPException(
                status_code=400,
                detail="‚õî –û—à–∏–±–∫–∞: x, y –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å >= 0, –∞ width –∏ height > 0."
            )

        unique_id = uuid.uuid4().hex  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        input_file = f"/tmp/{video_id}"
        output_file = f"/tmp/{unique_id}.{format}"  # –§–∞–π–ª —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ

        # 2Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú, –°–£–©–ï–°–¢–í–£–ï–¢ –õ–ò –í–ò–î–ï–û –í MinIO
        try:
            response = s3.head_object(Bucket=settings.S3_BUCKET_NAME, Key=video_id)
            file_size = response["ContentLength"]
            if file_size == 0:
                raise HTTPException(status_code=400, detail=f"‚ö†Ô∏è –í–∏–¥–µ–æ `{video_id}` –ø—É—Å—Ç–æ–µ.")
        except Exception:
            raise HTTPException(status_code=404, detail=f"‚ùå –í–∏–¥–µ–æ `{video_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ S3!")

        # 3Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ S3
        try:
            print(f"üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_id}")
            s3.download_file(settings.S3_BUCKET_NAME, video_id, input_file)
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {input_file}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

        # 4Ô∏è‚É£ **–ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ**
        original_width, original_height = get_video_resolution(input_file)
        print(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {original_width}x{original_height}")

        # 5Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ `crop` –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã**
        if x + width > original_width or y + height > original_height:
            raise HTTPException(
                status_code=400,
                detail=f"‚õî –û—à–∏–±–∫–∞: –û–±—Ä–µ–∑–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å ({width}x{height} —Å X={x}, Y={y}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –≤–∏–¥–µ–æ ({original_width}x{original_height})"
            )

        # 6Ô∏è‚É£ –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
        crop_filter = f"crop={width}:{height}:{x}:{y}"

        command = [
            "ffmpeg", "-y", "-hwaccel", "cuda", "-hwaccel_output_format", "cuda",  # –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            "-i", input_file,
            "-vf", crop_filter,  # –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ
            "-c:v", "h264_nvenc", "-preset", "p4", "-b:v", "5M",  # –ö–æ–¥–µ–∫ NVENC
            "-c:a", "aac", "-b:a", "128k",  # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫ AAC
            "-report",  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥-—Ñ–∞–π–ª FFmpeg
            output_file
        ]

        print(f"üî• FFmpeg –∫–æ–º–∞–Ω–¥–∞: {' '.join(command)}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg

        try:
            subprocess.run(command, check=True)
            print(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–µ–∑–∞–Ω–æ: {output_file}")
        except subprocess.CalledProcessError as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {str(e)}")

        # 7Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ S3
        try:
            with open(output_file, "rb") as f:
                upload_video(f, f"{unique_id}.{format}")
            print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {unique_id}.{format}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {str(e)}")

        # 8Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(input_file)
        os.remove(output_file)

        # 9Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
        return {"message": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–æ!", "url": f"{settings.S3_ENDPOINT}/{settings.S3_BUCKET_NAME}/{unique_id}.{format}"}

    except HTTPException as e:
        raise e

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    


def calculate_size(video_path, target_width, target_height):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –±–µ–∑ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è.
    """
    cap = cv2.VideoCapture(video_path)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    cap.release()

    scale_w = target_width / width
    scale_h = target_height / height
    scale = max(scale_w, scale_h)

    new_width = int(width * scale)
    new_height = int(height * scale)

    crop_x = (new_width - target_width) // 2 if new_width > target_width else 0
    crop_y = (new_height - target_height) // 2 if new_height > target_height else 0

    return new_width, new_height, crop_x, crop_y


def merge_videos(main_video_id: str, background_video_id: str, format: str = "mp4") -> dict:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –∏ —Ñ–æ–Ω –≤ TikTok-—Ñ–æ—Ä–º–∞—Ç–µ (9:16).

    :param main_video_id: –ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ S3
    :param background_video_id: –ò–º—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ S3
    :param format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MP4)
    :return: JSON-–æ—Ç–≤–µ—Ç (URL –∏–ª–∏ –æ—à–∏–±–∫–∞)
    """

    try:
        unique_id = uuid.uuid4().hex  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        output_file = f"/tmp/{unique_id}.{format}"  # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª

        main_video_path = f"/tmp/{main_video_id}"
        background_video_path = f"/tmp/{background_video_id}"

        # 1Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ S3
        try:
            print(f"üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {main_video_id}")
            s3.download_file(settings.S3_BUCKET_NAME, main_video_id, main_video_path)
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {main_video_path}")

            print(f"üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: {background_video_id}")
            s3.download_file(settings.S3_BUCKET_NAME, background_video_id, background_video_path)
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {background_video_path}")

        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")

        # 2Ô∏è‚É£ **–û–ø—Ä–µ–¥–µ–ª—è–µ–º TikTok-—Ñ–æ—Ä–º–∞—Ç (1080x1920)**
        tiktok_width, tiktok_height = 1080, 1920
        main_region_height = int(tiktok_height * 0.5)  # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
        bg_region_height = tiktok_height - main_region_height  # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å

        # 3Ô∏è‚É£ **–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ**
        main_width, main_height, main_crop_x, main_crop_y = calculate_size(main_video_path, tiktok_width, main_region_height)
        bg_width, bg_height, bg_crop_x, bg_crop_y = calculate_size(background_video_path, tiktok_width, bg_region_height)

        # 4Ô∏è‚É£ **–§–æ—Ä–º–∏—Ä—É–µ–º FFmpeg –∫–æ–º–∞–Ω–¥—É**
        cmd = [
            "ffmpeg", "-y",
            "-loglevel", "warning",  # ‚ö°Ô∏è –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ FFmpeg
            "-i", main_video_path,
            "-stream_loop", "-1", "-i", background_video_path,
            "-filter_complex",
            (
                f"[0:v]scale={main_width}:{main_height},crop={tiktok_width}:{main_region_height}:{main_crop_x}:{main_crop_y}[v0];"
                f"[1:v]scale={bg_width}:{bg_height},crop={tiktok_width}:{bg_region_height}:{bg_crop_x}:{bg_crop_y}[v1];"
                "[v0][v1]vstack=inputs=2[vout]"
            ),
            "-map", "[vout]",
            "-map", "0:a?",
            "-c:v", "h264_nvenc",
            "-preset", "p1",
            "-cq", "22",
            "-pix_fmt", "yuv420p",
            "-c:a", "aac",
            "-b:a", "192k",
            "-aspect", "9:16",
            "-shortest",
            output_file
        ]

        print(f"üî• FFmpeg –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")

        # 5Ô∏è‚É£ **–ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg**
        try:
            subprocess.run(cmd, check=True)
            print(f"‚úÖ –í–∏–¥–µ–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {output_file}")
        except subprocess.CalledProcessError as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {str(e)}")

        # 6Ô∏è‚É£ **–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ S3**
        try:
            with open(output_file, "rb") as f:
                upload_video(f, f"{unique_id}.{format}")
            print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {unique_id}.{format}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {str(e)}")

        # 7Ô∏è‚É£ **–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã**
        os.remove(main_video_path)
        os.remove(background_video_path)
        os.remove(output_file)

        # 8Ô∏è‚É£ **–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É**
        return {"message": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ!", "url": f"{settings.S3_ENDPOINT}/{settings.S3_BUCKET_NAME}/{unique_id}.{format}"}

    except HTTPException as e:
        raise e

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
