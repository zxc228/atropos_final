from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import List
from app.core.services.video_editor import cut_video, convert_video, resize_video, crop_video, merge_videos

router = APIRouter()

# üìå –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class CutRequest(BaseModel):
    video_id: str
    start_time: float
    end_time: float
    format: str = "mp4"

# üìå –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ
@router.post("/cut")
async def cut_video_endpoint(request: CutRequest):
    try:
        video_url = cut_video(
            video_id=request.video_id,
            start_time=request.start_time,
            end_time=request.end_time,
            format=request.format
        )
        return {"url": video_url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    

# üìå –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class ConvertRequest(BaseModel):
    video_id: str
    target_format: str

# üìå –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
@router.post("/convert")
async def convert_video_endpoint(request: ConvertRequest):
    try:
        video_url = convert_video(
            video_id=request.video_id,
            target_format=request.target_format
        )
        return {"url": video_url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    

class ResizeRequest(BaseModel):
    video_id: str
    resolution: str  # –ù–∞–ø—Ä–∏–º–µ—Ä, "1280x720"
    format: str = "mp4"

# üìå –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ
@router.post("/resize")
async def resize_video_endpoint(request: ResizeRequest):
    try:
        video_url = resize_video(
            video_id=request.video_id,
            resolution=request.resolution,
            format=request.format
        )
        return {"url": video_url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

class CropRequest(BaseModel):
    video_id: str = Field(..., example="example.mp4")
    x: int = Field(..., ge=0, example=100)
    y: int = Field(..., ge=0, example=50)
    width: int = Field(..., gt=0, example=1280)
    height: int = Field(..., gt=0, example=720)
    format: str = Field("mp4", example="mp4")

@router.post("/crop")
async def crop_video_endpoint(request: CropRequest):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ.
    """
    try:
        video_url = crop_video(
            video_id=request.video_id,
            x=request.x,
            y=request.y,
            width=request.width,
            height=request.height,
            format=request.format
        )
        return {"message": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–æ!", "url": video_url}
    except HTTPException as e:
        raise e  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ FastAPI (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    


class MergeRequest(BaseModel):
    main_video_id: str
    background_video_id: str
    format: str = "mp4"

@router.post("/merge")
async def merge_video_endpoint(request: MergeRequest):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ TikTok-—Ñ–æ—Ä–º–∞—Ç–µ.
    """
    try:
        video_url = merge_videos(
            main_video_id=request.main_video_id,
            background_video_id=request.background_video_id,
            format=request.format
        )
        return {"message": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ!", "url": video_url}
    except HTTPException as e:
        raise e
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")